# Import necessary libraries
from sage.graphs.graph import Graph
from collections import deque

# Function to perform BFS and return distances
def bfs(n, edges, start):
    # Create a graph
    G = Graph()
    G.add_vertices(range(1, n + 1))  # Add vertices labeled from 1 to n
    G.add_edges(edges)  # Add edges
    
    # Initialize distances array
    distances = [-1] * (n + 1)  # -1 means unreachable
    distances[start] = 0  # Distance to self is 0
    
    # Initialize queue
    queue = deque([start])  # Use deque for efficient pop from the left
    
    # Perform BFS
    while queue:
        node = queue.popleft()  # Dequeue the front element
        
        # Iterate over neighbors
        for neighbor in G.neighbors(node):
            if distances[neighbor] == -1:  # If not visited
                distances[neighbor] = distances[node] + 6  # Each edge weighs 6 units
                queue.append(neighbor)  # Enqueue the neighbor

    # Prepare the result excluding the starting node
    result = [distances[i] for i in range(1, n + 1) if i != start]
    return result

# Example usage
def main():
    n = 5  # Number of nodes
    edges = [(1, 2), (1, 3), (2, 4), (3, 5)]  # Edge list
    start = 3  # Starting node

    # Call the BFS function
    distances = bfs(n, edges, start)
    print("Distances from node", start, ":", distances)

# Execute the main function
main()

edges = [(1, 2), (1, 3), (2, 4), (3, 5)]

# Create the graph
G = Graph()
G.add_edges(edges)

# Plot the graph with vertex labels
graph_plot = G.plot(vertex_labels=True)

# Display the graph
show(graph_plot)
